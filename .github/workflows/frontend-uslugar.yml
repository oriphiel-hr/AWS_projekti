name: Frontend - Build & Deploy (Hostinger)

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "uslugar/frontend/**"
      - ".github/workflows/frontend-uslugar.yml"

permissions:
  id-token: write
  contents: read

env:
  FRONTEND_DIR: uslugar/frontend
  # default; može se prepisati ako treba
  BUILD_CMD: npm ci && npm run build
  # fallback vrijednost; detektor će pronaći stvarni izlaz
  DIST_DIR: dist
  SERVER_DIR: ${{ secrets.HOSTINGER_SERVER_DIR && secrets.HOSTINGER_SERVER_DIR || 'public_html' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # osiguraj lockfile (za caching)
      - name: Ensure package-lock.json (frontend)
        run: |
          test -f "${{ env.FRONTEND_DIR }}/package-lock.json" || (
            cd "${{ env.FRONTEND_DIR }}" && npm i --package-lock-only
          )

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Detect framework
        id: fw
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          FW=$(node -e 'const p=require("./package.json");const d={...p.dependencies,...p.devDependencies};
            if (d?.next) process.stdout.write("next");
            else if (d?.vite) process.stdout.write("vite");
            else if (d?.["react-scripts"]) process.stdout.write("cra");
            else if (d?.["@angular/cli"]) process.stdout.write("angular");
            else process.stdout.write("unknown");')
          echo "framework=$FW" >> "$GITHUB_OUTPUT"
          echo "Detected framework: $FW"

      - name: Build frontend (framework-aware)
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.fw.outputs.framework }}" in
            next)
              # Pokušaj napraviti statički export (za FTP hosting)
              if npm run -s | grep -qE '^ *export *'; then
                echo "Next.js detected → build + export"
                npm ci
                npm run build
                npm run export
              else
                echo "Next.js detected, ali nema 'export' skripte."
                echo "Dodaj u package.json:  \"export\": \"next export\"  i/ili u next.config.js:  module.exports={ output:'export' }"
                echo "Pokušavam ipak: npm ci && npm run build && npx next export"
                npm ci
                npm run build
                npx next export || true
              fi
              ;;
            cra)
              echo "CRA detected → npm ci && npm run build"
              npm ci
              npm run build
              ;;
            angular|vite|unknown)
              echo "Using default BUILD_CMD: '${BUILD_CMD}'"
              eval "${BUILD_CMD}"
              ;;
          esac

      - name: List build artifacts (debug)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "== tree (top) =="; ls -la
          echo "== dist =="; ls -la dist || true
          echo "== build =="; ls -la build || true
          echo "== out =="; ls -la out || true
          echo "== .next =="; ls -la .next || true
          echo "== dist/* =="
          ls -la dist/* 2>/dev/null || true

      - name: Detect build output directory
        id: detect
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          name="$(node -e "console.log((require('./package.json').name)||'')" || true)"
          fw="${{ steps.fw.outputs.framework }}"
          candidates=()

          # prefer based on framework
          if [ "$fw" = "next" ]; then
            candidates+=("out")     # static export (ideal za FTP/S3)
            candidates+=(".next")   # SSR build → ne radi na čistom FTP hostingu
          fi

          # env + common
          candidates+=("${DIST_DIR}" "dist" "build" "out" "public")
          [ -n "$name" ] && candidates+=("dist/$name")

          # first subdir in dist/
          if [ -d dist ]; then
            first_sub="$(ls -d dist/* 2>/dev/null | head -n1 || true)"
            [ -n "$first_sub" ] && candidates+=("$first_sub")
          fi

          echo "Trying candidates: ${candidates[*]}"

          found=""
          for d in "${candidates[@]}"; do
            if [ -d "$d" ]; then
              # prefer directory that has index.html
              if [ -f "$d/index.html" ]; then found="$d"; break; fi
              # otherwise any non-empty dir (but avoid .next unless no alternative)
              if [ "$d" != ".next" ] && [ "$(find "$d" -type f | wc -l)" -gt 0 ]; then found="$d"; break; fi
            fi
          done

          if [ -z "$found" ] && [ -d ".next" ]; then
            echo "⚠️ Nađen je .next (SSR), ali to se ne može deployati preko čistog FTP-a."
            echo "  Rješenja: (a) dodaj next export (static) → deployaj 'out/',"
            echo "            (b) deployaj kao Docker/Node app (VPS) ili koristi Vercel."
            exit 1
          fi

          if [ -z "$found" ]; then
            echo "❌ Nije pronađen build output."
            echo "   Ako koristiš CRA postavi DIST_DIR=build; za Next export DIST_DIR=out."
            exit 1
          fi

          echo "✅ Detektiran build output: $found"
          echo "dir=$found" >> "$GITHUB_OUTPUT"

      - name: Deploy via FTPS to Hostinger (mirror & delete)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ${{ env.FRONTEND_DIR }}/${{ steps.detect.outputs.dir }}/
          server-dir: ${{ env.SERVER_DIR }}
          # ⚠️ briše sve što nije u lokalnom buildu
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
