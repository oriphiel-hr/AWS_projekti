name: Frontend - Build & Deploy (Hostinger) 

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "uslugar/frontend/**"
      - ".github/workflows/frontend-uslugar.yml"

permissions:
  id-token: write
  contents: read

env:
  FRONTEND_DIR: uslugar/frontend
  BUILD_CMD: npm ci && npm run build
  DIST_DIR: uslugar/frontend/dist
  # ➜ Root of domain (public_html/) with TRAILING SLASH
  SERVER_DIR: ${{ secrets.HOSTINGER_SERVER_DIR && secrets.HOSTINGER_SERVER_DIR || 'public_html/' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Samo ako postoji package.json – pripremi lockfile za cache
      - name: Ensure package-lock.json (if Node project)
        run: |
          set -e
          if [ -f "${{ env.FRONTEND_DIR }}/package.json" ]; then
            cd "${{ env.FRONTEND_DIR }}"
            test -f package-lock.json || npm i --package-lock-only
          else
            echo "No package.json -> static site"
          fi

      - name: Setup Node (if Node project)
        if: ${{ hashFiles(format('{0}/package.json', env.FRONTEND_DIR)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Detect framework (static aware)
        id: fw
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          FW=$(node -e '
            let p=null; try { p=require("./package.json"); } catch(e) {}
            if(!p){ process.stdout.write("static"); process.exit(0); }
            const d={...(p.dependencies||{}), ...(p.devDependencies||{})};
            if (d.next) process.stdout.write("next");
            else if (d.vite) process.stdout.write("vite");
            else if (d["react-scripts"]) process.stdout.write("cra");
            else if (d["@angular/cli"]) process.stdout.write("angular");
            else process.stdout.write("unknown");
          ')
          echo "framework=$FW" >> "$GITHUB_OUTPUT"
          echo "Detected: $FW"

      - name: Build (skip for static)
        if: ${{ steps.fw.outputs.framework != 'static' }}
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.fw.outputs.framework }}" in
            next)
              if npm run -s | grep -qE '^ *export *'; then
                npm ci && npm run build && npm run export
              else
                npm ci && npm run build && npx --yes next export || true
              fi
              ;;
            cra)
              npm ci && npm run build
              ;;
            angular|vite|unknown)
              eval "${BUILD_CMD}"
              ;;
          esac

      - name: List artifacts (debug)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "== top =="; ls -la
          echo "== dist =="; ls -la dist || true
          echo "== build =="; ls -la build || true
          echo "== out =="; ls -la out || true
          echo "== .next =="; ls -la .next || true

      - name: Detect output dir
        id: detect
        working-directory: ${{ env.FRONTEND_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          fw="${{ steps.fw.outputs.framework }}"
          candidates=()
          if [ "$fw" = "next" ]; then candidates+=("out" ".next"); fi
          candidates+=("${DIST_DIR}" "dist" "build" "out" "public" ".")  # <-- dodali "."
          echo "Candidates: ${candidates[*]}"
          found=""
          for d in "${candidates[@]}"; do
            if [ -d "$d" ]; then
              if [ -f "$d/index.html" ]; then found="$d"; break; fi
              if [ "$d" != ".next" ] && [ "$(find "$d" -type f | wc -l)" -gt 0 ]; then found="$d"; break; fi
            fi
          done
          if [ -z "$found" ] && [ -d ".next" ]; then
            echo "SSR build (.next) se ne može deployati preko FTP-a bez servera."; exit 1
          fi
          if [ -z "$found" ]; then
            echo "Nije nađen build output (index.html)."; exit 1
          fi
          echo "dir=$found" >> "$GITHUB_OUTPUT"
          echo "Using: $found"

      - name: Deploy via FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ${{ env.FRONTEND_DIR }}/${{ steps.detect.outputs.dir }}/
          server-dir: ${{ env.SERVER_DIR }}
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.DS_Store
