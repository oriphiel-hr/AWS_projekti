name: Backend - Reuse existing Task Definition (ECR→ECS)

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "uslugar/backend/**"
      - "!uslugar/backend/prisma/**"
      - ".github/workflows/backend-uslugar-ecs.yml"

env:
  AWS_REGION: eu-north-1
  ECR_REPO_BACKEND: uslugar
  ECR_REPO_PRISMA: uslugar-prisma-tasks
  ECS_CLUSTER: apps-cluster
  ECS_SERVICE: uslugar-service-2gk1f1mv
  CONTAINER_NAME: uslugar

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      # (opcionalno) pinaj Node 20 da npm radi sigurno
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 🔐 Osiguraj package-lock.json prije docker builda
      - name: Ensure package-lock.json (backend)
        working-directory: uslugar/backend
        run: |
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          ls -l package-lock.json || true

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Ako nemaš CreateRepository dozvolu, ovo samo upozori umjesto da puca
      - name: Ensure ECR repos (describe or warn)
        run: |
          set -e
          for NAME in "${{ env.ECR_REPO_BACKEND }}" "${{ env.ECR_REPO_PRISMA }}"; do
            if ! aws ecr describe-repositories --repository-names "$NAME" >/dev/null 2>&1; then
              echo "::warning::ECR repo '$NAME' ne postoji ili rola nema ecr:CreateRepository. Kreiraj ga ručno u eu-north-1."
            fi
          done

      # ✅ OVO JE TVOJ TRAŽENI KORAK — povuci SHA/:latest ili izgradi lokalno i pushaj :latest
      - name: Build & Push app image (uses prisma image by SHA or builds locally)
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          PRISMA_SHA="$ECR_REGISTRY/${{ env.ECR_REPO_PRISMA }}:${{ github.sha }}"
          PRISMA_LATEST="$ECR_REGISTRY/${{ env.ECR_REPO_PRISMA }}:latest"

          # 1) probaj pull po SHA
          if docker pull "$PRISMA_SHA" ; then
            USE_PRISMA_IMAGE="$PRISMA_SHA"

          # 2) probaj pull :latest
          elif docker pull "$PRISMA_LATEST" ; then
            USE_PRISMA_IMAGE="$PRISMA_LATEST"

          # 3) nema slike → izgradi lokalno i (po želji) pushaj :latest
          else
            echo "Prisma image not found; building locally…"
            docker build -f uslugar/backend/Dockerfile.prisma \
              -t "$PRISMA_LATEST" \
              uslugar/backend
            # push latest da postoji fallback idući put (ako rola ima pravo)
            docker push "$PRISMA_LATEST" || true
            USE_PRISMA_IMAGE="$PRISMA_LATEST"
          fi

          # Izgradi backend s definiranim PRISMA_IMAGE
          docker build -f uslugar/backend/Dockerfile.prod \
            --build-arg PRISMA_IMAGE="$USE_PRISMA_IMAGE" \
            -t $ECR_REGISTRY/${{ env.ECR_REPO_BACKEND }}:$IMAGE_TAG \
            uslugar/backend

          docker push $ECR_REGISTRY/${{ env.ECR_REPO_BACKEND }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPO_BACKEND }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Read current Task Definition
        run: |
          TD_ARN=$(aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --query "services[0].taskDefinition" --output text)
          aws ecs describe-task-definition --task-definition "$TD_ARN" \
            --query "taskDefinition" --output json > td.json

          jq 'del(.status,.requiresAttributes,.compatibilities,.revision,.registeredAt,.registeredBy,.deregisteredAt,.taskDefinitionArn,.tags,.inferenceAccelerators)' td.json > td_clean.json

      - name: Replace image in TD
        run: |
          jq --arg NAME "${{ env.CONTAINER_NAME }}" --arg IMG "${IMAGE_URI}" '
            .containerDefinitions = (.containerDefinitions | map(
              if .name == $NAME then .image = $IMG | . else . end
            ))
          ' td_clean.json > td_new.json

      - name: Register new TD revision
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td_new.json \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TD_ARN=$NEW_TD_ARN" >> $GITHUB_ENV
          echo "Registered: $NEW_TD_ARN"

      - name: Update service to new TD
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${NEW_TD_ARN}" \
            --query "service.taskDefinition" --output text
