# ==========================
# Stage 1: deps + prisma gen
# ==========================
FROM node:20-bookworm-slim AS deps

WORKDIR /app

# Keširanje ovisnosti
COPY package*.json ./
# Samo production deps (runtime)
RUN npm ci --omit=dev

# Prisma schema + generate (treba za @prisma/client)
COPY prisma ./prisma
ENV PRISMA_CLI_NO_UPDATE_NOTIFIER=1
RUN npx prisma generate

# ==========================
# Stage 2: runtime
# ==========================
FROM node:20-bookworm-slim AS runtime

WORKDIR /app
ENV NODE_ENV=production \
    PORT=8080 \
    PRISMA_CLI_NO_UPDATE_NOTIFIER=1

# Healthcheck alat
RUN apt-get update && apt-get install -y --no-install-recommends wget \
 && rm -rf /var/lib/apt/lists/*

# Samo što treba za runtime
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/prisma ./prisma

# Kopiraj aplikacijski kod (server.js, src/, itd.)
COPY . .

# (Opcionalno) ne-root korisnik
USER node

EXPOSE 8080

# Healthcheck očekuje /hc (promijeni po potrebi)
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
  CMD wget -qO- http://127.0.0.1:8080/hc || exit 1

# Entry file je konfigurabilan build arg-om
# Primjeri:
#   docker build -f Dockerfile.prod --build-arg START_FILE=server.js -t image .
#   docker build -f Dockerfile.prod --build-arg START_FILE=src/server.js -t image .
ARG START_FILE=server.js
ENV START_FILE=$START_FILE

# Koristimo shell formu da ENV radi u CMD-u
CMD ["sh","-lc","node \"$START_FILE\""]
