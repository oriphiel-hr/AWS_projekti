generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  passwordHash   String
  fullName       String
  role           Role          @default(USER)
  phone          String?
  city           String?
  latitude       Float?        // Geolokacija
  longitude      Float?        // Geolokacija
  isVerified     Boolean       @default(false) // Verifikacija korisnika
  legalStatus    LegalStatus?  @relation("UserLegalStatus", fields: [legalStatusId], references: [id])
  legalStatusId  String?       // Pravni status (za firme koje traže usluge)
  taxId          String?       // OIB
  companyName    String?       // Naziv firme
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  providerProfile ProviderProfile?
  jobs            Job[]
  offers          Offer[]
  reviewsGiven    Review[] @relation("reviewsGiven")
  reviewsReceived Review[] @relation("reviewsReceived")
  notifications   Notification[]
  chatMessages    ChatMessage[] @relation("senderMessages")
  chatRooms       ChatRoom[] @relation("participants")
}

model ProviderProfile {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @unique
  bio            String?
  categories     Category[]    @relation("ProviderCategories")
  portfolio      Json?         // Portfolio slike i radovi
  ratingAvg      Float         @default(0)
  ratingCount    Int           @default(0)
  serviceArea    String?
  specialties    String[]      // Specijalizacije pružatelja
  experience     Int?          // Godine iskustva
  website        String?       // Website pružatelja
  isAvailable    Boolean       @default(true) // Dostupnost za nove poslove
  legalStatus    LegalStatus?  @relation(fields: [legalStatusId], references: [id])
  legalStatusId  String?       // Pravni status (obrt, d.o.o., itd.)
  taxId          String?       // OIB (porezni broj)
  companyName    String?       // Naziv obrta/firme
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  parentId    String? // Za hijerarhijske kategorije
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  providers   ProviderProfile[] @relation("ProviderCategories")
  jobs        Job[]
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
}

model Job {
  id             String    @id @default(cuid())
  title          String
  description    String
  budgetMin      Int?
  budgetMax      Int?
  city           String?
  latitude       Float?    // Geolokacija posla
  longitude      Float?    // Geolokacija posla
  status         JobStatus @default(OPEN)
  urgency        Urgency   @default(NORMAL) // Hitnost posla
  jobSize        JobSize?  // Veličina posla
  deadline       DateTime? // Rok izvršenja
  images         String[]  // Slike posla
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  offers         Offer[]
  acceptedOfferId String?
  chatRooms      ChatRoom[] @relation("jobChatRooms")
}

model Offer {
  id          String   @id @default(cuid())
  amount      Int
  message     String?
  status      OfferStatus @default(PENDING)
  isNegotiable Boolean  @default(true) // Može li se pregovarati o cijeni
  estimatedDays Int?    // Procijenjeni broj dana za izvršenje
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  from       User     @relation("reviewsGiven", fields: [fromUserId], references: [id])
  fromUserId String
  to         User     @relation("reviewsReceived", fields: [toUserId], references: [id])
  toUserId   String
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Novi modeli za trebam.hr funkcionalnosti

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  jobId     String?  // Povezano s poslom
  offerId   String?  // Povezano s ponudom
  createdAt DateTime @default(now())
}

model ChatRoom {
  id        String   @id @default(cuid())
  name      String?
  job       Job?     @relation("jobChatRooms", fields: [jobId], references: [id])
  jobId     String?
  participants User[] @relation("participants")
  messages  ChatMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  sender    User     @relation("senderMessages", fields: [senderId], references: [id])
  senderId  String
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        String   // BASIC, PREMIUM, PRO
  status      String   // ACTIVE, CANCELLED, EXPIRED
  credits     Int      @default(0) // Krediti za odgovaranje na poslove
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NotificationType {
  NEW_JOB
  NEW_OFFER
  OFFER_ACCEPTED
  OFFER_REJECTED
  JOB_COMPLETED
  REVIEW_RECEIVED
  SYSTEM
}

enum Urgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum JobSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

// Pravni statusi pružatelja usluga
model LegalStatus {
  id          String   @id @default(cuid())
  code        String   @unique // INDIVIDUAL, SOLE_TRADER, COMPANY, etc.
  name        String   // Naziv na hrvatskom
  description String?  // Detaljan opis
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  users       User[]   @relation("UserLegalStatus")
  providers   ProviderProfile[]
}
