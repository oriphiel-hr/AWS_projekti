generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  fullName     String
  role         Role     @default(USER)
  phone        String?
  city         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  providerProfile ProviderProfile?
  jobs            Job[]
  offers          Offer[]
  reviewsGiven    Review[] @relation("reviewsGiven")
  reviewsReceived Review[] @relation("reviewsReceived")
}

model ProviderProfile {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
  bio         String?
  categories  Category[] @relation("ProviderCategories", references: [id])
  portfolio   Json?
  ratingAvg   Float   @default(0)
  ratingCount Int     @default(0)
  serviceArea String?
}

model Category {
  id        String @id @default(cuid())
  name      String @unique
  providers ProviderProfile[] @relation("ProviderCategories")
  jobs      Job[]
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  budgetMin   Int?
  budgetMax   Int?
  city        String?
  status      JobStatus @default(OPEN)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  offers      Offer[]
  acceptedOfferId String?
}

model Offer {
  id        String   @id @default(cuid())
  amount    Int
  message   String?
  status    OfferStatus @default(PENDING)
  job       Job     @relation(fields: [jobId], references: [id])
  jobId     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  from      User     @relation("reviewsGiven", fields: [fromUserId], references: [id])
  fromUserId String
  to        User     @relation("reviewsReceived", fields: [toUserId], references: [id])
  toUserId   String
  createdAt DateTime @default(now())
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}